package  com.vsc.app {		import flash.display.MovieClip;	import flash.display.GradientType;	import flash.display.SpreadMethod;	import flash.geom.Matrix;	import flash.text.Font;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;	import com.vsc.mc.VSCWord;	import com.vsc.mc.VSCDef;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.filters.*;	import com.greensock.easing.*;	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.DropShadowFilterPlugin;	import com.greensock.plugins.GlowFilterPlugin;	import flash.display.Sprite;	import com.greensock.TimelineLite;	import com.greensock.TweenMax;	import flash.display.LoaderInfo;	import flash.net.URLLoader;	import flash.net.URLVariables;	import flash.net.URLRequest;	import flash.net.LocalConnection;	import flash.utils.Dictionary;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.external.ExternalInterface;	import flash.display.DisplayObjectContainer;		public class Main extends MovieClip {		var str:String = "";		var dict:Dictionary = new Dictionary();		private var currentClip:VSCWord;		private var tf:TextField;		private var answerFormat:TextFormat;		public var tweenTime : Number = 0.415;		private var grid:Sprite = new Sprite();		private var rGrid:Sprite = new Sprite();		private var gridItems:Array = new Array();		private var defItems:Array = new Array();		private var numOfColumns:int = 1;		private var spacer:int = 10;		var keyStr:String;    	var valueStr:String;	    var paramObj:Object;		var xmlData:XML;		var attemptCount:int = 0;		var allowedAttempts:int;		var clickSnd:click1 = new click1();		var dropSnd:objectFalls = new objectFalls();		var cheerSnd:cheer__digitopia = new cheer__digitopia();		var booSnd:descent = new descent();		var gameChannel:SoundChannel;		var receiving:LocalConnection = new LocalConnection();		var sendToHere:String = "sendToActionScript"; 		var checkAnswers:Function = checkJSAnswers;		var loadExternalXML:String = "loadJSXML"; 		var loadDefinitons:Function = loadJSXML;				public function Main() {			TweenPlugin.activate([DropShadowFilterPlugin]);			TweenPlugin.activate([GlowFilterPlugin]);			grid.name = "lGrid";			rGrid.name = "rGrid";			this.addChild(rGrid);			rGrid.x = 330;			rGrid.y = 10;			this.addChild(grid);			grid.x = 10;			grid.y = 10;						receiving.allowDomain("*");			if(ExternalInterface.available) {				ExternalInterface.addCallback (sendToHere, checkAnswers); 				ExternalInterface.addCallback (loadExternalXML, loadDefinitons); 			}//			loadGame();			//			loadLocal();//			makeAnswerButton();					}				private function loadLocal():void {			var req:URLRequest = new URLRequest("newdef.xml");//			var req:URLRequest = new URLRequest("game_definitions.xml");			var xmlLoader:URLLoader = new URLLoader();			xmlLoader.addEventListener(Event.COMPLETE, loadXML);			xmlLoader.load(req);		}				private function makeAnswerButton():void {			var answerButton:Sprite = new Sprite();			if(answerFormat == null) {				var myFont:Font = new CalReg();				answerFormat = new TextFormat();				answerFormat.font = myFont.fontName;				//_wordFormat.bold = false;				answerFormat.kerning = false;				answerFormat.letterSpacing = .1;				answerFormat.size = 14;				answerFormat.color = "0xFFFF00";				answerFormat.align = "left";			}						var fType:String = GradientType.LINEAR;			var colors:Array = [ 0x2A20BD, 0xFFFFFF ];			var alphas:Array = [ 1, .25 ];			var ratios:Array = [ 180, 255 ];			var matr:Matrix = new Matrix();				matr.createGradientBox( 100, 25, (Math.PI/180)*90, 0, 0 );			var sprMethod:String = SpreadMethod.PAD;			answerButton.graphics.beginGradientFill( fType, colors, alphas, ratios, matr, sprMethod );			answerButton.graphics.drawRoundRect(0,-2,100,25,3,3);			answerButton.graphics.endFill();			if(tf == null) {				tf = new TextField();				tf.autoSize = TextFieldAutoSize.LEFT;				tf.selectable = false;				tf.mouseEnabled = false;				tf.background = false;				tf.border = false;				tf.wordWrap = false;				tf.height = 35;				tf.antiAliasType = flash.text.AntiAliasType.ADVANCED;				tf.defaultTextFormat = answerFormat;				tf.embedFonts = true;				tf.text = "ANSWER";				var _cen = (answerButton.width-tf.textWidth-5)/2;				//trace("this text width = " + tf.textWidth + " this width = " + this.width + " cen pos = " + _cen);				tf.x = _cen;			}			answerButton.addChild(tf);			var thisShadow:DropShadowFilter = new DropShadowFilter();			thisShadow.distance = 5;			thisShadow.color = 0x323232;			thisShadow.blurX = 7;			thisShadow.blurY = 7;			thisShadow.quality = 5;			thisShadow.inner = false;			answerButton.filters = [thisShadow];			answerButton.mouseChildren = false;			answerButton.buttonMode = true;			answerButton.x = 20;			answerButton.y = 280;			answerButton.addEventListener(MouseEvent.CLICK,answerClick);			this.addChild(answerButton);		}				public function loadJSXML(ab:String):void {			xmlData=new XML(ab);			allowedAttempts = xmlData.game_info.attribute("tries");			ExternalInterface.call("console.log","atttempts: " + allowedAttempts);			//trace("XML-------------------------XML");			//trace(xmlData.toString());			ExternalInterface.call("console.log", "XML-------------------------XML");			ExternalInterface.call("console.log", xmlData.toString());			generateGamePieces(xmlData);			attemptCount = 0;		}		private function checkJSAnswers():void {			doAnswerCheck();		}		private function loadXML(e:Event):void {			xmlData = new XML(e.target.data);			trace("XML-------------------------XML");			trace(xmlData);			generateGamePieces(xmlData);			attemptCount = 0;		}				private function loadGame():void {			doQueryToDict();			var xmlLoader:URLLoader = new URLLoader();			xmlLoader.addEventListener(Event.COMPLETE, loadXML);			xmlLoader.load(new URLRequest(dict["xmlfile"]));		}		private function doQueryToDict():void {			paramObj = LoaderInfo(this.root.loaderInfo).parameters;			for (keyStr in paramObj) {        		valueStr = String(paramObj[keyStr]);        		str = str + "\t" + keyStr + ":\t" + valueStr + "\n";				trace(str);				dict[keyStr] = valueStr;			}		}		public function generateGamePieces(xmlInput:XML):void {						var recordList:XMLList = xmlInput.record;			//ExternalInterface.call("console.log","recordlist: " + recordList.toString());			trace("recordlist: " + recordList.toString());			var randDict:Dictionary = new Dictionary();			for each(var def:XML in recordList) {				var key:String = def.@definitionID;				var value:String = def.@definition;				var _def:VSCDef = new VSCDef(key, value);				defItems.push(_def);				var x:int = defItems.indexOf(_def);				defItems[x].x = (x % numOfColumns) * (defItems[x].width + spacer);				defItems[x].y = Math.floor(x/numOfColumns) * (60);				rGrid.addChild(defItems[x]);			}						for each(var record:XML in recordList) {				var _word:VSCWord = new VSCWord(record.attribute("wordID"), record.attribute("word"));				gridItems.push(_word);				var i:int = gridItems.indexOf(_word);				gridItems[i].x = (i % numOfColumns) * (gridItems[i].width + spacer) +10;				gridItems[i].y = Math.floor(i / numOfColumns) * (gridItems[i].height + spacer+10);				gridItems[i].addEventListener(MouseEvent.MOUSE_DOWN, mousePress);				grid.addChild(gridItems[i]);			}						gridItems.sort(randomSort);			for(var j:int; j<gridItems.length; j++)			{				TweenLite.to(gridItems[j],0.5,{x:(j % numOfColumns) * (gridItems[j].width + spacer) +10, y:Math.floor(j / numOfColumns) * (gridItems[j].height + spacer+10), ease:Sine.easeInOut});			}			defItems.sort(randomSort);			for(var k:int; k<defItems.length; k++)			{				TweenLite.to(defItems[k],0.5,{x:(k % numOfColumns) * (defItems[k].width + spacer) +10, y:Math.floor(k / numOfColumns) * 60, ease:Sine.easeInOut});			}		}				private function answerClick(event:MouseEvent):void {			var t1:TimelineLite = new TimelineLite();			var butt:Sprite = Sprite(event.target);			t1.append(new TweenMax(butt, .1, {dropShadowFilter:{blurX:1,blurY:1,distance:1}, ease:Sine.easeIn}));	 	 	t1.append(new TweenMax(butt, .1, {dropShadowFilter:{blurX:7,blurY:7,distance:5}, ease:Sine.easeOut}));			doAnswerCheck();		}				private function mousePress(event:MouseEvent):void {			gameChannel = clickSnd.play();			currentClip = VSCWord(event.target);			currentClip.startDrag();			TweenLite.to(currentClip, .25, {scaleX:1.12, scaleY:1.12, dropShadowFilter:{blurX:5, blurY:5, distance:10, alpha:0.6}, ease:Sine.easeInOut});			gridItems.splice(gridItems.indexOf(currentClip),1);			grid.setChildIndex(currentClip,grid.numChildren-1);			stage.addEventListener(MouseEvent.MOUSE_UP, item_onMouseUP);			for(var i:int; i<gridItems.length; i++)			{				TweenLite.to(gridItems[i],0.5,{x:(i % numOfColumns) * (gridItems[i].width + spacer) +10, y:Math.floor(i / numOfColumns) * (gridItems[i].height + spacer+10), ease:Sine.easeInOut});			}		}				private function doAnswerCheck():void {			var rightArr:Array = new Array();			var wrongArr:Array = new Array();			attemptCount++;			ExternalInterface.call("console.log","attemptCount: " + attemptCount + " allowedAttempts: " + allowedAttempts);			if(attemptCount < allowedAttempts) 			{				for each (var defAnswer:VSCDef in getChildrenOf(rGrid)) {					var _id:String = defAnswer.name.substr(1, defAnswer.name.length);					var _db:MovieClip = MovieClip(defAnswer.getChildByName("db"+_id));					if(_db.numChildren > 0) {						var _word:VSCWord = VSCWord(_db.getChildAt(0));						var _wid:String  = _word.name.substr(1, _word.name.length);						if(_id === _wid) {							defItems.splice(defItems.indexOf(defAnswer),1);							TweenLite.to(defAnswer, 1.5, {alpha:0, ease:Sine.easeInOut});							rightArr.push(defAnswer);							//defGrid.removeChild(defAnswer);						} else {							wrongArr.push(defAnswer);						}					}				}					ExternalInterface.call("console.log","wrong array: " + wrongArr.length);				for each (var wrongAns:VSCDef in wrongArr) {					var _wrid:String = wrongAns.name.substr(1, wrongAns.name.length);					var _wdb:MovieClip = MovieClip(wrongAns.getChildByName("db"+ _wrid));					trace("wbd: " + _wdb.name + " children? " + _wdb.numChildren);					var _wword:VSCWord = VSCWord(_wdb.getChildAt(0));					gridItems.push(_wword);				}											for each (var rightAns:VSCDef in rightArr) {					rGrid.removeChild(rightAns);				}								gridItems.sort(randomSort);				for(var j:int; j<gridItems.length; j++)				{					gridItems[j].parent.removeChild(gridItems[j]);					grid.addChild(gridItems[j]);					TweenLite.to(gridItems[j],0.5,{x:(j % numOfColumns) * (gridItems[j].width + spacer) +10, y:Math.floor(j / numOfColumns) * (gridItems[j].height + spacer+10), ease:Sine.easeInOut});				}					defItems.sort(randomSort);				for(var k:int; k<defItems.length; k++)				{					TweenLite.to(defItems[k],0.5,{x:(k % numOfColumns) * (defItems[k].width + spacer) +10, y:Math.floor(k / numOfColumns) * 60, ease:Sine.easeInOut});				}				if(wrongArr.length == 0) {					gameChannel = cheerSnd.play();				}			} else {				if(wrongArr.length == 0) {					gameChannel = cheerSnd.play();				} else {					gameChannel = booSnd.play();				}			}					}				private function item_onMouseUP(event:MouseEvent):void {			currentClip = VSCWord(event.target);			currentClip.stopDrag();			var _rgrid:Sprite = Sprite(this.getChildByName("rGrid"));			var _grid:Sprite = Sprite(this.getChildByName("lGrid"));			var _foundMatch:Boolean = false;			for(var x:int; x < _rgrid.numChildren; x++)			{				var _targ:VSCDef = VSCDef(_rgrid.getChildAt(x));				if(_targ.hitTestObject(currentClip)) 				{					gameChannel = dropSnd.play();					var _id:String = _targ.name.substr(1, _targ.name.length);					var _db:MovieClip = MovieClip(_targ.getChildByName("db"+_id));					if(_db.numChildren > 0) {						//assuming all children are VSCWORD add them back to the grid						var bouncedClip:VSCWord = VSCWord(_db.getChildAt(0));						gridItems.push(bouncedClip);						grid.addChild(bouncedClip);						for(var t:int; t<gridItems.length; t++)						{							TweenLite.to(gridItems[t],0.5,{scaleX:1.00, scaleY:1.00, dropShadowFilter:{blurX:2, blurY:2, distance:2, alpha:1}, x:(t % numOfColumns) * (gridItems[t].width + spacer) +10, y:Math.floor(t / numOfColumns) * (gridItems[t].height + spacer+10), ease:Sine.easeInOut});						}					}					currentClip.x = _db.x+5;					currentClip.y = _db.y+5;					TweenLite.to(currentClip, .25, {scaleX:1.00, scaleY:1.00, dropShadowFilter:{blurX:2, blurY:2, distance:2, alpha:1}, ease:Expo.easeIn});					_db.addChild(currentClip);					//trace("level: " + _targ.getChildIndex(currentClip) + "total: " + _targ.numChildren);					_foundMatch = true;					break;				}			}			if(!_foundMatch) 			{				gridItems.push(currentClip);				grid.addChild(currentClip);				for(var q:int; q<gridItems.length; q++)				{					TweenLite.to(gridItems[q],0.5,{scaleX:1.00, scaleY:1.00, dropShadowFilter:{blurX:2, blurY:2, distance:2, alpha:1}, x:(q % numOfColumns) * (gridItems[q].width + spacer) +10, y:Math.floor(q / numOfColumns) * (gridItems[q].height + spacer+10), ease:Sine.easeInOut});				}			}			stage.removeEventListener(MouseEvent.MOUSE_UP, item_onMouseUP);		}				function randomSort(a:*, b:*):Number {		    if (Math.random() < 0.5) return -1;    		else return 1;		} 		public function getChildrenOf(target:DisplayObjectContainer):Array		{   			var children:Array = [];		   for (var i:uint = 0; i < target.numChildren; i++){			  children.push(target.getChildAt(i));		   }				   return children;		} 	}	}