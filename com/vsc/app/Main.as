package  com.vsc.app {		import flash.display.MovieClip;	import flash.text.TextField;	import com.vsc.mc.VSCWord;	import com.vsc.mc.VSCDef;	import flash.events.MouseEvent;	import flash.filters.*;	import com.greensock.easing.*;	import com.greensock.TweenLite;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.DropShadowFilterPlugin;	import flash.display.Sprite;		public class Main extends MovieClip {		private var currentClip:VSCWord;		public var tweenTime : Number = 0.415;		private var grid:Sprite = new Sprite();		private var rGrid:Sprite = new Sprite();		private var gridItems:Array = new Array();		private var defItems:Array = new Array();		private var numOfColumns:int = 1;		private var spacer:int = 10;				public function Main() {			TweenPlugin.activate([DropShadowFilterPlugin]);			grid.name = "lGrid";			rGrid.name = "rGrid";			this.addChild(rGrid);			rGrid.x = 395;			rGrid.y = 10;			this.addChild(grid);			grid.x = 10;			grid.y = 10;						var wordArray:Array = new Array(new VSCWord("1", "Longwordthatneedstomatch"), new VSCWord("2", "Longwordthatneedstomatch"), new VSCWord("3", "Longwordthatneedstomatch"));			for(var i:int; i < 3; i++)			{				gridItems[i] = wordArray[i];				gridItems[i].x = (i % numOfColumns) * (gridItems[i].width + spacer) +10;				gridItems[i].y = Math.floor(i / numOfColumns) * (gridItems[i].height + spacer)+10;				gridItems[i].addEventListener(MouseEvent.MOUSE_DOWN, mousePress);				grid.addChild(gridItems[i]);			}			var defArray:Array = new Array(new VSCDef("1","This is a long definition of what this word means. Somtimes you need more than one sentence to do it."),new VSCDef("2","This is a long definition of what this word means. Somtimes you need more than one sentence to do it."),new VSCDef("3","This is a long definition of what this word means. Somtimes you need more than one sentence to do it."));			for(var x:int; x < defArray.length; x++)			{				defItems[x] = defArray[x];				defItems[x].x = (1 % numOfColumns) * (defItems[x].width + spacer) + 10;				defItems[x].y = Math.floor(x/numOfColumns) * (defItems[x].height+spacer);				rGrid.addChild(defItems[x]);			}					}				private function mousePress(event:MouseEvent):void {			currentClip = VSCWord(event.target);			currentClip.startDrag();			TweenLite.to(currentClip, .25, {scaleX:1.12, scaleY:1.12, dropShadowFilter:{blurX:5, blurY:5, distance:10, alpha:0.6}, ease:Sine.easeInOut});			gridItems.splice(gridItems.indexOf(currentClip),1);			grid.setChildIndex(currentClip,grid.numChildren-1);			stage.addEventListener(MouseEvent.MOUSE_UP, item_onMouseUP);			for(var i:int; i<gridItems.length; i++)			{				TweenLite.to(gridItems[i],0.5,{x:(i % numOfColumns) * (gridItems[i].width + spacer) +10, y:Math.floor(i / numOfColumns) * (gridItems[i].height + spacer)+10, ease:Sine.easeInOut});			}		}				private function item_onMouseUP(event:MouseEvent):void {			currentClip = VSCWord(event.target);			currentClip.stopDrag();			var _rgrid:Sprite = Sprite(this.getChildByName("rGrid"));			var _grid:Sprite = Sprite(this.getChildByName("lGrid"));			var _foundMatch:Boolean = false;			for(var x:int; x < _rgrid.numChildren; x++)			{				var _targ:VSCDef = VSCDef(_rgrid.getChildAt(x));				if(_targ.hitTestObject(currentClip)) 				{					var _id:String = _targ.name.substr(_targ.name.length-1);					var _db:MovieClip = MovieClip(_targ.getChildByName("db"+_id));					if(_db.numChildren > 0) {						//assuming all children are VSCWORD add them back to the grid						var bouncedClip:VSCWord = VSCWord(_db.getChildAt(0));						gridItems.push(bouncedClip);						grid.addChild(bouncedClip);						for(var t:int; t<gridItems.length; t++)						{							TweenLite.to(gridItems[t],0.5,{scaleX:1.00, scaleY:1.00, dropShadowFilter:{blurX:2, blurY:2, distance:2, alpha:1}, x:(t % numOfColumns) * (gridItems[t].width + spacer) +10, y:Math.floor(t / numOfColumns) * (gridItems[t].height + spacer)+10, ease:Sine.easeInOut});						}					}					currentClip.x = _db.x+50;					currentClip.y = _db.y+5;					TweenLite.to(currentClip, .25, {x:_db.x+50, scaleX:1.00, scaleY:1.00, dropShadowFilter:{blurX:2, blurY:2, distance:2, alpha:1}, ease:Expo.easeIn});					_db.addChild(currentClip);					//trace("level: " + _targ.getChildIndex(currentClip) + "total: " + _targ.numChildren);					_foundMatch = true;					break;				}			}			if(!_foundMatch) 			{				gridItems.push(currentClip);				grid.addChild(currentClip);				for(var i:int; i<gridItems.length; i++)				{					TweenLite.to(gridItems[i],0.5,{scaleX:1.00, scaleY:1.00, dropShadowFilter:{blurX:2, blurY:2, distance:2, alpha:1}, x:(i % numOfColumns) * (gridItems[i].width + spacer) +10, y:Math.floor(i / numOfColumns) * (gridItems[i].height + spacer)+10, ease:Sine.easeInOut});				}			}			stage.removeEventListener(MouseEvent.MOUSE_UP, item_onMouseUP);		}	}	}